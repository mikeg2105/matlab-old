function [fxxx,fxxy,fxxz,fxyy,fxyz,fxzz,...
          fyxx,fyxy,fyxz,fyyy,fyyz,fyzz,...
          fzxx,fzxy,fzxz,fzyy,fzyz,fzzz...
          ]=fluxes(...
          nx,ny,nz,...
          x,y,z,r,psi,...
          alp,cux,cuy,cuz,rg,...
          uxx,uxy,uxz,uyy,uyz,uzz,...
          gxx,gxy,gxz,gyy,gyz,gzz,...
          qxx,qxy,qxz,qyy,qyz,qzz,...
          dxuxx,dxuxy,dxuxz,dxuyy,dxuyz,dxuzz,...
          dyuxx,dyuxy,dyuxz,dyuyy,dyuyz,dyuzz,...
          dzuxx,dzuxy,dzuxz,dzuyy,dzuyz,dzuzz...
          )
%[fxxx,fxxy,fxxz,fxyy,fxyz,fxzz,...
%          fyxx,fyxy,fyxz,fyyy,fyyz,fyzz,...
%          fzxx,fzxy,fzxz,fzyy,fzyz,fzzz...
%          ]=fluxes(...
%          nx,ny,nz,...
%          x,y,z,r,psi,...
%          alp,cux,cuy,cuz,rg,...
%          uxx,uxy,uxz,uyy,uyz,uzz,...
%          gxx,gxy,gxz,gyy,gyz,gzz,...
%          qxx,qxy,qxz,qyy,qyz,qzz,...
%          dxuxx,dxuxy,dxuxz,dxuyy,dxuyz,dxuzz,...
%          dyuxx,dyuxy,dyuxz,dyuyy,dyuyz,dyuzz,...
%          dzuxx,dzuxy,dzuxz,dzuyy,dzuyz,dzuzz,...
%          )
%==============================================================================
%
%  [ROUTINE NAME] Fluxes
%  [AUTHOR] Joan Masso, NCSA & UIB
% 
%  [PURPOSE] Compute the fluxes of the equations
%
%  [ARGUMENTS] 
%     [INPUT]
%        nx,ny,nz  : grid sizes of the 3d cube.
%        Full list of grid and metric arrays
%     [OUTPUT] 
%        fxxx,fxxy,... : fluxes of the qxx,..., as they are the only
%                        variables with "complicated" fluxes.
%                       That is, F^k_{ij} of the $q^{ij}$
%
%  [INCLUDES]  metric.h  declares all the passed grid and metric arrays.
%
%  [CALLED BY]  Method
%  
%<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

%c      ******* q fluxes *******
       fxxx = alp.*rg.*(2.*cux.*uxx + dxuxx.*uxx + dyuxx.*uxy + dzuxx.*uxz);
       fxxy = alp.*rg.*(cuy.*uxx + dxuxy.*uxx + cux.*uxy + dyuxy.*uxy + dzuxy.*uxz);
       fxyy = alp.*rg.*(dxuyy.*uxx + 2.*cuy.*uxy + dyuyy.*uxy + dzuyy.*uxz);
       fxxz = alp.*rg.*(cuz.*uxx + dxuxz.*uxx + dyuxz.*uxy + cux.*uxz + dzuxz.*uxz);
       fxyz = alp.*rg.*(dxuyz.*uxx + cuz.*uxy + dyuyz.*uxy + cuy.*uxz + dzuyz.*uxz);
       fxzz = alp.*rg.*(dxuzz.*uxx + dyuzz.*uxy + 2.*cuz.*uxz + dzuzz.*uxz);
       fyxx = alp.*rg.*(2.*cux.*uxy + dxuxx.*uxy + dyuxx.*uyy + dzuxx.*uyz);
       fyxy = alp.*rg.*(cuy.*uxy + dxuxy.*uxy + cux.*uyy + dyuxy.*uyy + dzuxy.*uyz);
       fyyy = alp.*rg.*(dxuyy.*uxy + 2.*cuy.*uyy + dyuyy.*uyy + dzuyy.*uyz);
       fyxz = alp.*rg.*(cuz.*uxy + dxuxz.*uxy + dyuxz.*uyy + cux.*uyz + dzuxz.*uyz);
       fyyz = alp.*rg.*(dxuyz.*uxy + cuz.*uyy + dyuyz.*uyy + cuy.*uyz + dzuyz.*uyz);
       fyzz = alp.*rg.*(dxuzz.*uxy + dyuzz.*uyy + 2.*cuz.*uyz + dzuzz.*uyz);
       fzxx = alp.*rg.*(2.*cux.*uxz + dxuxx.*uxz + dyuxx.*uyz + dzuxx.*uzz);
       fzxy = alp.*rg.*(cuy.*uxz + dxuxy.*uxz + cux.*uyz + dyuxy.*uyz + dzuxy.*uzz);
       fzyy = alp.*rg.*(dxuyy.*uxz + 2.*cuy.*uyz + dyuyy.*uyz + dzuyy.*uzz);
       fzxz = alp.*rg.*(cuz.*uxz + dxuxz.*uxz + dyuxz.*uyz + cux.*uzz + dzuxz.*uzz);
       fzyz = alp.*rg.*(dxuyz.*uxz + cuz.*uyz + dyuyz.*uyz + cuy.*uzz + dzuyz.*uzz);
       fzzz = alp.*rg.*(dxuzz.*uxz + dyuzz.*uyz + 2.*cuz.*uzz + dzuzz.*uzz);
       
 %endfunction




