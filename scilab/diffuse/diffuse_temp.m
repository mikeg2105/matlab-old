function [newconc]=newconc(conc, n1, n2, n3,h,dif,sources,sinks)

  //cycle over each element of the array
  //update concentration
  
	for i2=1:n1
	      for i2=1:n2
	      			for i3=1:n3
	      			
	      			   //get submatrix
	      						concsub=zeros(3,3,3)
	      						for j1=-1:1
	      							for j2=-1:1
	      								for j3=-1:1
	      									si1=i1+j1
	      									si2=i2+j2
	      									si3=i3+j3
	      									
	      									if si1>0 
	      										if si1<=n1
	      									  		if si2>0
	      									  			if si2<=n2
	      									          if si3>0
	      									              if si3<=n3
	      																		concsub(j1+2, j2+2, j3+3)=conc(si1,si2,si3)
	      									        						end
	      									        			end
	      									        end
	      												end
	      										end		
	      									end
	      									//finished checking bcs
	      											
	      								end
	      							end
	      						end
	      						//got sub matrix
	      						//calculate laplacian
	      						lap=lap3d(concsub,h)
	      						sink=sinks(i1,i2,i3)
	      						source=sources(i1,i2,i3)
	      						
	      						//use laplacian to update
	      						newconc=ode(conc(i1,i2,i3),t0,t,list(cdott,lap,dif,sink,source))
	      						conc(i1,i2,i3)=newconc
	      						
	      			end
	      end
	end

	newconc

endfunction


//Calculate laplacian in 3d
//n1xn2xn3 conc array
//size n1xn2xn3
//
//Will always be a 3x3x3 piece of the complete 
//array at this point there is no boundary condition check
function [lap3d]=lap3d(conc,h)

   t1=conc(3,2,2)-2*conc(2,2,2)+conc(1,2,2)
   t2=conc(2,3,2)-2*conc(2,2,2)+conc(2,1,2)
   t3=conc(2,2,3)-2*conc(2,2,2)+conc(2,2,1)
   lap3d=(t1+t2+t3)/(h*h)
endfunction

//-->x=ode(x0,t0,t,list(sdotx,p,yold))
function [cdott]=cdott(t,c,lap3d,dif,sink,source)
	cdott=-dif*lap3d-sink+source
endfunction

//-->y=ode(y0,t0,t,list(sdoty,r,xold,zold))
function [sdoty]=sdoty(t,y,r,xold,zold)
	sdoty=-xold*zold+r*xold-y
endfunction

//-->z=ode(z0,t0,t,list(sdotz,b,xold,yold))
function [sdotz]=sdotz(t,z,b,xold,yold)
	sdotz=xold*yold-b*z
endfunction

//save xyz values
function savexyz(filename, nvals, x, y, z)

	fd=mopen(filename, 'w')
  mfprintf(fd, '%f\n', nvals)
	
	for j=1:nvals
	 		mfprintf(fd, '%f %f %f\n', x(j), y(j), z(j))
	end
	
	mclose(fd)
   
  
endfunction

//save xyz values
function savexyzx3d(filename, nvals, x, y, z, t)

	fd=mopen(filename, 'w')
  writevrmlheader(fd);
  
  mfprintf(fd, 'Group {\n');
  mfprintf(fd,'children [\n');

  
  
  
  writevrmlviewpoint(fd);
	//writevrmlnavinfo(fd)
	writevrmldefsphere(fd)
	
	for j=1:nvals
	 		writevrmlobject(fd, x(j), y(j), z(j), t(j))
	end
	
	mfprintf(fd,' ]\n');
  mfprintf(fd, '}\n');

	
	mclose(fd)
   
  
endfunction

function writex3dheader(fd)

	mfprintf(fd, '#VRML V2.0 utf8\n')
	mfprintf(fd, '# X3D-to-VRML-97 XSL translation autogenerated by X3dToVrml97.xsl\n')
	mfprintf(fd, '# http:\/\/www.web3D.org\/TaskGroups\/x3d\/translation\/X3dToVrml97.xsl\n')

	mfprintf(fd, '# [X3D] VRML V3.0 utf8\n')

	mfprintf(fd, '# [head]\n')
	mfprintf(fd, '# [meta] filename: lorenz.x3d\n')
	mfprintf(fd, '# [meta] description: Simple X3D example\n')
	mfprintf(fd, '# [meta] created: 3 January 2005\n')
	mfprintf(fd, '# [meta] revised: 6 March 2003\n')
	mfprintf(fd, '# [meta] author: Mike Griffiths\n')
	mfprintf(fd, '# [meta] url: http:\/\/www.web3d.org\/TaskGroups\/x3d\/translation\/examples\/HelloWorld.x3d\n')
	mfprintf(fd, '# [meta] generator: X3D-Edit, http:\/\/www.web3d.org\/TaskGroups\/x3d\/translation\/README.X3D-Edit.html\n')
	mfprintf(fd, '# [Scene]\n')

	mfprintf(fd, '# Example scene to illustrate X3D tags and attributes.\n')


endfunction

function writex3dviewpoint(fd)
     mfprintf(fd, 'Viewpoint {\n');
     //mfprintf(fd, 'description "hello, world!"\n');
     mfprintf(fd, 'orientation 0 1 0 1.57\n');
     mfprintf(fd, 'position 6 -1 0\n');
     mfprintf(fd, '}\n');
endfunction

//function writevrmlnavinfo(fd)

	//mfprintf('\n')

//endfunction

function writex3ddefsphere(fd)
    mfprintf(fd, 'Shape {\n');
        mfprintf(fd, 'geometry DEF sphere1 Sphere {\n');
        mfprintf(fd, '}\n');
        mfprintf(fd, 'appearance Appearance {\n');
          mfprintf(fd, 'material Material {\n');
            mfprintf(fd, 'diffuseColor 0.1 0.5 1\n');
          mfprintf(fd, '}\n');
        mfprintf(fd, '}\n');
      mfprintf(fd, '}\n');
endfunction

function writex3dobject(fd, x, y,z,t)

	mfprintf(fd, 'Transform {\n');
        mfprintf(fd, 'rotation 0 1 0 1.57\n');
        mfprintf(fd, 'translation %f %f %f\n',x,y,z);
        mfprintf(fd, 'children [\n');
         mfprintf(fd, 'Shape {\n');
        //mfprintf(fd, 'geometry USE sphere1 Sphere {\n');
        mfprintf(fd, 'geometry USE sphere1\n');
        //mfprintf(fd, '}\n');
        mfprintf(fd, 'appearance Appearance {\n');
          mfprintf(fd, 'material Material {\n');
            mfprintf(fd, 'diffuseColor 0.1 0.5 %f\n',t/20.0);
          mfprintf(fd, '}\n');
        mfprintf(fd, '}\n');
			mfprintf(fd, '}\n');
         mfprintf(fd, ']\n');
      mfprintf(fd, '}\n');


endfunction




